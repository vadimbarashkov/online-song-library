// Code generated by mockery v2.46.0. DO NOT EDIT.

package usecase

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vadimbarashkov/online-song-library/internal/entity"
)

// MockMusicInfoAPI is an autogenerated mock type for the musicInfoAPI type
type MockMusicInfoAPI struct {
	mock.Mock
}

type MockMusicInfoAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMusicInfoAPI) EXPECT() *MockMusicInfoAPI_Expecter {
	return &MockMusicInfoAPI_Expecter{mock: &_m.Mock}
}

// FetchSongInfo provides a mock function with given fields: ctx, song
func (_m *MockMusicInfoAPI) FetchSongInfo(ctx context.Context, song entity.Song) (*entity.SongDetail, error) {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for FetchSongInfo")
	}

	var r0 *entity.SongDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) (*entity.SongDetail, error)); ok {
		return rf(ctx, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) *entity.SongDetail); ok {
		r0 = rf(ctx, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SongDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMusicInfoAPI_FetchSongInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSongInfo'
type MockMusicInfoAPI_FetchSongInfo_Call struct {
	*mock.Call
}

// FetchSongInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - song entity.Song
func (_e *MockMusicInfoAPI_Expecter) FetchSongInfo(ctx interface{}, song interface{}) *MockMusicInfoAPI_FetchSongInfo_Call {
	return &MockMusicInfoAPI_FetchSongInfo_Call{Call: _e.mock.On("FetchSongInfo", ctx, song)}
}

func (_c *MockMusicInfoAPI_FetchSongInfo_Call) Run(run func(ctx context.Context, song entity.Song)) *MockMusicInfoAPI_FetchSongInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Song))
	})
	return _c
}

func (_c *MockMusicInfoAPI_FetchSongInfo_Call) Return(_a0 *entity.SongDetail, _a1 error) *MockMusicInfoAPI_FetchSongInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMusicInfoAPI_FetchSongInfo_Call) RunAndReturn(run func(context.Context, entity.Song) (*entity.SongDetail, error)) *MockMusicInfoAPI_FetchSongInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMusicInfoAPI creates a new instance of MockMusicInfoAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMusicInfoAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMusicInfoAPI {
	mock := &MockMusicInfoAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
