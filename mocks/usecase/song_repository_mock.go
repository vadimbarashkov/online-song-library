// Code generated by mockery v2.46.0. DO NOT EDIT.

package usecase

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vadimbarashkov/online-song-library/internal/entity"

	uuid "github.com/google/uuid"
)

// MockSongRepository is an autogenerated mock type for the songRepository type
type MockSongRepository struct {
	mock.Mock
}

type MockSongRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSongRepository) EXPECT() *MockSongRepository_Expecter {
	return &MockSongRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, songID
func (_m *MockSongRepository) Delete(ctx context.Context, songID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, songID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, songID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, songID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSongRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
func (_e *MockSongRepository_Expecter) Delete(ctx interface{}, songID interface{}) *MockSongRepository_Delete_Call {
	return &MockSongRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, songID)}
}

func (_c *MockSongRepository_Delete_Call) Run(run func(ctx context.Context, songID uuid.UUID)) *MockSongRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSongRepository_Delete_Call) Return(_a0 int64, _a1 error) *MockSongRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int64, error)) *MockSongRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, filter, pagination
func (_m *MockSongRepository) GetAll(ctx context.Context, filter *entity.SongFilter, pagination *entity.Pagination) ([]*entity.Song, error) {
	ret := _m.Called(ctx, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.SongFilter, *entity.Pagination) ([]*entity.Song, error)); ok {
		return rf(ctx, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.SongFilter, *entity.Pagination) []*entity.Song); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.SongFilter, *entity.Pagination) error); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSongRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *entity.SongFilter
//   - pagination *entity.Pagination
func (_e *MockSongRepository_Expecter) GetAll(ctx interface{}, filter interface{}, pagination interface{}) *MockSongRepository_GetAll_Call {
	return &MockSongRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, filter, pagination)}
}

func (_c *MockSongRepository_GetAll_Call) Run(run func(ctx context.Context, filter *entity.SongFilter, pagination *entity.Pagination)) *MockSongRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.SongFilter), args[2].(*entity.Pagination))
	})
	return _c
}

func (_c *MockSongRepository_GetAll_Call) Return(_a0 []*entity.Song, _a1 error) *MockSongRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongRepository_GetAll_Call) RunAndReturn(run func(context.Context, *entity.SongFilter, *entity.Pagination) ([]*entity.Song, error)) *MockSongRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, songID
func (_m *MockSongRepository) GetByID(ctx context.Context, songID uuid.UUID) (*entity.Song, error) {
	ret := _m.Called(ctx, songID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Song, error)); ok {
		return rf(ctx, songID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Song); ok {
		r0 = rf(ctx, songID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockSongRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
func (_e *MockSongRepository_Expecter) GetByID(ctx interface{}, songID interface{}) *MockSongRepository_GetByID_Call {
	return &MockSongRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, songID)}
}

func (_c *MockSongRepository_GetByID_Call) Run(run func(ctx context.Context, songID uuid.UUID)) *MockSongRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSongRepository_GetByID_Call) Return(_a0 *entity.Song, _a1 error) *MockSongRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongRepository_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.Song, error)) *MockSongRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, song
func (_m *MockSongRepository) Save(ctx context.Context, song entity.Song) (*entity.Song, error) {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) (*entity.Song, error)); ok {
		return rf(ctx, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) *entity.Song); ok {
		r0 = rf(ctx, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSongRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - song entity.Song
func (_e *MockSongRepository_Expecter) Save(ctx interface{}, song interface{}) *MockSongRepository_Save_Call {
	return &MockSongRepository_Save_Call{Call: _e.mock.On("Save", ctx, song)}
}

func (_c *MockSongRepository_Save_Call) Run(run func(ctx context.Context, song entity.Song)) *MockSongRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Song))
	})
	return _c
}

func (_c *MockSongRepository_Save_Call) Return(_a0 *entity.Song, _a1 error) *MockSongRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongRepository_Save_Call) RunAndReturn(run func(context.Context, entity.Song) (*entity.Song, error)) *MockSongRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, songID, song
func (_m *MockSongRepository) Update(ctx context.Context, songID uuid.UUID, song entity.Song) (*entity.Song, error) {
	ret := _m.Called(ctx, songID, song)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Song) (*entity.Song, error)); ok {
		return rf(ctx, songID, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Song) *entity.Song); ok {
		r0 = rf(ctx, songID, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Song) error); ok {
		r1 = rf(ctx, songID, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSongRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
//   - song entity.Song
func (_e *MockSongRepository_Expecter) Update(ctx interface{}, songID interface{}, song interface{}) *MockSongRepository_Update_Call {
	return &MockSongRepository_Update_Call{Call: _e.mock.On("Update", ctx, songID, song)}
}

func (_c *MockSongRepository_Update_Call) Run(run func(ctx context.Context, songID uuid.UUID, song entity.Song)) *MockSongRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Song))
	})
	return _c
}

func (_c *MockSongRepository_Update_Call) Return(_a0 *entity.Song, _a1 error) *MockSongRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongRepository_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Song) (*entity.Song, error)) *MockSongRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSongRepository creates a new instance of MockSongRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSongRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSongRepository {
	mock := &MockSongRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
