// Code generated by mockery v2.46.0. DO NOT EDIT.

package http

import (
	context "context"

	entity "github.com/vadimbarashkov/online-song-library/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSongUseCase is an autogenerated mock type for the songUseCase type
type MockSongUseCase struct {
	mock.Mock
}

type MockSongUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSongUseCase) EXPECT() *MockSongUseCase_Expecter {
	return &MockSongUseCase_Expecter{mock: &_m.Mock}
}

// AddSong provides a mock function with given fields: ctx, song
func (_m *MockSongUseCase) AddSong(ctx context.Context, song entity.Song) (*entity.Song, error) {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for AddSong")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) (*entity.Song, error)); ok {
		return rf(ctx, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Song) *entity.Song); ok {
		r0 = rf(ctx, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongUseCase_AddSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSong'
type MockSongUseCase_AddSong_Call struct {
	*mock.Call
}

// AddSong is a helper method to define mock.On call
//   - ctx context.Context
//   - song entity.Song
func (_e *MockSongUseCase_Expecter) AddSong(ctx interface{}, song interface{}) *MockSongUseCase_AddSong_Call {
	return &MockSongUseCase_AddSong_Call{Call: _e.mock.On("AddSong", ctx, song)}
}

func (_c *MockSongUseCase_AddSong_Call) Run(run func(ctx context.Context, song entity.Song)) *MockSongUseCase_AddSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Song))
	})
	return _c
}

func (_c *MockSongUseCase_AddSong_Call) Return(_a0 *entity.Song, _a1 error) *MockSongUseCase_AddSong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongUseCase_AddSong_Call) RunAndReturn(run func(context.Context, entity.Song) (*entity.Song, error)) *MockSongUseCase_AddSong_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSongWithVerses provides a mock function with given fields: ctx, songID, pagination
func (_m *MockSongUseCase) FetchSongWithVerses(ctx context.Context, songID uuid.UUID, pagination entity.Pagination) (*entity.SongWithVerses, *entity.Pagination, error) {
	ret := _m.Called(ctx, songID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FetchSongWithVerses")
	}

	var r0 *entity.SongWithVerses
	var r1 *entity.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Pagination) (*entity.SongWithVerses, *entity.Pagination, error)); ok {
		return rf(ctx, songID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Pagination) *entity.SongWithVerses); ok {
		r0 = rf(ctx, songID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.SongWithVerses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Pagination) *entity.Pagination); ok {
		r1 = rf(ctx, songID, pagination)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, entity.Pagination) error); ok {
		r2 = rf(ctx, songID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSongUseCase_FetchSongWithVerses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSongWithVerses'
type MockSongUseCase_FetchSongWithVerses_Call struct {
	*mock.Call
}

// FetchSongWithVerses is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
//   - pagination entity.Pagination
func (_e *MockSongUseCase_Expecter) FetchSongWithVerses(ctx interface{}, songID interface{}, pagination interface{}) *MockSongUseCase_FetchSongWithVerses_Call {
	return &MockSongUseCase_FetchSongWithVerses_Call{Call: _e.mock.On("FetchSongWithVerses", ctx, songID, pagination)}
}

func (_c *MockSongUseCase_FetchSongWithVerses_Call) Run(run func(ctx context.Context, songID uuid.UUID, pagination entity.Pagination)) *MockSongUseCase_FetchSongWithVerses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Pagination))
	})
	return _c
}

func (_c *MockSongUseCase_FetchSongWithVerses_Call) Return(_a0 *entity.SongWithVerses, _a1 *entity.Pagination, _a2 error) *MockSongUseCase_FetchSongWithVerses_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSongUseCase_FetchSongWithVerses_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Pagination) (*entity.SongWithVerses, *entity.Pagination, error)) *MockSongUseCase_FetchSongWithVerses_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSongs provides a mock function with given fields: ctx, pagination, filters
func (_m *MockSongUseCase) FetchSongs(ctx context.Context, pagination entity.Pagination, filters ...entity.SongFilter) ([]*entity.Song, *entity.Pagination, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pagination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchSongs")
	}

	var r0 []*entity.Song
	var r1 *entity.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pagination, ...entity.SongFilter) ([]*entity.Song, *entity.Pagination, error)); ok {
		return rf(ctx, pagination, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pagination, ...entity.SongFilter) []*entity.Song); ok {
		r0 = rf(ctx, pagination, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pagination, ...entity.SongFilter) *entity.Pagination); ok {
		r1 = rf(ctx, pagination, filters...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.Pagination, ...entity.SongFilter) error); ok {
		r2 = rf(ctx, pagination, filters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSongUseCase_FetchSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSongs'
type MockSongUseCase_FetchSongs_Call struct {
	*mock.Call
}

// FetchSongs is a helper method to define mock.On call
//   - ctx context.Context
//   - pagination entity.Pagination
//   - filters ...entity.SongFilter
func (_e *MockSongUseCase_Expecter) FetchSongs(ctx interface{}, pagination interface{}, filters ...interface{}) *MockSongUseCase_FetchSongs_Call {
	return &MockSongUseCase_FetchSongs_Call{Call: _e.mock.On("FetchSongs",
		append([]interface{}{ctx, pagination}, filters...)...)}
}

func (_c *MockSongUseCase_FetchSongs_Call) Run(run func(ctx context.Context, pagination entity.Pagination, filters ...entity.SongFilter)) *MockSongUseCase_FetchSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]entity.SongFilter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(entity.SongFilter)
			}
		}
		run(args[0].(context.Context), args[1].(entity.Pagination), variadicArgs...)
	})
	return _c
}

func (_c *MockSongUseCase_FetchSongs_Call) Return(_a0 []*entity.Song, _a1 *entity.Pagination, _a2 error) *MockSongUseCase_FetchSongs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSongUseCase_FetchSongs_Call) RunAndReturn(run func(context.Context, entity.Pagination, ...entity.SongFilter) ([]*entity.Song, *entity.Pagination, error)) *MockSongUseCase_FetchSongs_Call {
	_c.Call.Return(run)
	return _c
}

// ModifySong provides a mock function with given fields: ctx, songID, song
func (_m *MockSongUseCase) ModifySong(ctx context.Context, songID uuid.UUID, song entity.Song) (*entity.Song, error) {
	ret := _m.Called(ctx, songID, song)

	if len(ret) == 0 {
		panic("no return value specified for ModifySong")
	}

	var r0 *entity.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Song) (*entity.Song, error)); ok {
		return rf(ctx, songID, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Song) *entity.Song); ok {
		r0 = rf(ctx, songID, song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.Song) error); ok {
		r1 = rf(ctx, songID, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongUseCase_ModifySong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifySong'
type MockSongUseCase_ModifySong_Call struct {
	*mock.Call
}

// ModifySong is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
//   - song entity.Song
func (_e *MockSongUseCase_Expecter) ModifySong(ctx interface{}, songID interface{}, song interface{}) *MockSongUseCase_ModifySong_Call {
	return &MockSongUseCase_ModifySong_Call{Call: _e.mock.On("ModifySong", ctx, songID, song)}
}

func (_c *MockSongUseCase_ModifySong_Call) Run(run func(ctx context.Context, songID uuid.UUID, song entity.Song)) *MockSongUseCase_ModifySong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Song))
	})
	return _c
}

func (_c *MockSongUseCase_ModifySong_Call) Return(_a0 *entity.Song, _a1 error) *MockSongUseCase_ModifySong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongUseCase_ModifySong_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Song) (*entity.Song, error)) *MockSongUseCase_ModifySong_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSong provides a mock function with given fields: ctx, songID
func (_m *MockSongUseCase) RemoveSong(ctx context.Context, songID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, songID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSong")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, songID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, songID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSongUseCase_RemoveSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSong'
type MockSongUseCase_RemoveSong_Call struct {
	*mock.Call
}

// RemoveSong is a helper method to define mock.On call
//   - ctx context.Context
//   - songID uuid.UUID
func (_e *MockSongUseCase_Expecter) RemoveSong(ctx interface{}, songID interface{}) *MockSongUseCase_RemoveSong_Call {
	return &MockSongUseCase_RemoveSong_Call{Call: _e.mock.On("RemoveSong", ctx, songID)}
}

func (_c *MockSongUseCase_RemoveSong_Call) Run(run func(ctx context.Context, songID uuid.UUID)) *MockSongUseCase_RemoveSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSongUseCase_RemoveSong_Call) Return(_a0 int64, _a1 error) *MockSongUseCase_RemoveSong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSongUseCase_RemoveSong_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int64, error)) *MockSongUseCase_RemoveSong_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSongUseCase creates a new instance of MockSongUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSongUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSongUseCase {
	mock := &MockSongUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
